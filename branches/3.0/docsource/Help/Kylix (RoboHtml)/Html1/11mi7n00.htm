<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
 <HEAD>
  <!-- $MVD$:app("RoboHELP HTML Edition by Blue Sky Software, portions by MicroVision Dev. Inc.","769") -->
  <!-- $MVD$:template("","0","0") -->
  <TITLE>TAbDeflateHelper.OnProgressStep</TITLE>
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
  <SCRIPT LANGUAGE="javascript" TITLE="BSSC Special Effects" SRC="BSSCDHTM.js">
</SCRIPT>
 <META NAME="generator" CONTENT="RoboHELP by Blue Sky Software www.blue-sky.com HTML Edition">
 <META NAME="MS-HKWD" CONTENT="OnProgressStep"></HEAD>
  <BODY BGCOLOR="WHITE" TEXT="BLACK" ONLOAD="BSSCOnLoad();" ONCLICK="BSSCOnClick();" ONUNLOAD="BSSCOnUnload();">
  <H1>
   TAbDeflateHelper.OnProgressStep</H1>
  <P>
   <A HREF="11mi6a42.htm">TAbDeflateHelper</A></P><PRE><CODE><B>property</B> OnProgressStep : TAbProgressStep</CODE><BR><CODE>TAbProgressStep = <B>procedure</B> (aPercentDone : integer) <B>of object</B>;</CODE></PRE><P>
   Default: nil</P>
  <P>
   Defines the event handler that fires regularly during the process.</P>
  <P>
   If the OnProgressStep property is not set, no monitoring of the 
   progress of the compression or decompression can be done. Otherwise 
   OnProgressStep defines a method that will be called regularly during 
   the process of translating one stream to the other. The event may not 
   be fired at every percentage point though: the frequency will depend 
   on the size of the input stream.</P>
  <P>
   On decompression, the OnProgressStep event is fired regularly as data 
   is read from the input stream. Essentially decompression is a linear 
   process with regards to time (the time taken will be roughly 
   proportional to the size of data to decompress), and so the intervals 
   between events will be roughly constant.</P>
  <P>
   On compression, however, the process is more complex. Essentially the 
   Deflate algorithm is a three-step process, repeated as many times as 
   required: an LZ77 compression step, an analysis phase, followed by an 
   optional Huffman compression step. The input stream is read during 
   the LZ77 step and the output stream is written to during the Huffman 
   step. However, between these two steps is an analysis phase where 
   Abbrevia decides the best method of storing the compressed data (it 
   is here, for example, that Abbrevia will decide that the data is 
   uncompressible). The analysis phase uses statistical methods to 
   decide which of several options the data should be compressed with, 
   if at all. Although the other two steps are roughly linear in time, 
   the analysis phase may vary in execution speed. Taking all these 
   points together, it should be noted that although the OnProgressStep 
   event will be fired regularly (for instance, every percentage point 
   or every five percentage points), the lengths of the intervals 
   between the events will vary. This effect should only be noticeable 
   with larger input streams.
 </BODY>
</HTML>